# In this file we want to list the most important git commands and termsi

Terminology:
detached HEAD = A HEAD that is pointing to a commit and not to a branch
HEAD = HEAD is a special pointer which usualy points on a branch (but can also point on commits but is untypical)
branch=is a pointer to a hash commit 
.gitignore = files that are not recognized by our git repo 
commit=snapshot of the project state a certain point in time
repository=staging area + history
working tree=Is what we see in our filesystem
staging area=modifications that are considered if we commit the folder
history=storeplace of all commits made during the project
1.) git init = create a new repo in the current directory
2.) git status = useful informations (which branch, un-/tracked files)
3.) git add <filename> = add file to staging area
4.) git log = overview on all existing commits
4.1)git log -- filename = show all commits that affected file "filename"
5.) git diff = show difference between working tree and staging area
6.) git diff --staged = show difference between staging area and most recent commit 
7.) git commit -m "message" = create new snapshot with information "message"
8.) git rm filename = remove file from working tree and add this deletion to staging area 
9.) git checkout --filename = replace "filename" with the corresponding file in staging area 
10.) git reset HEAD filename = load file "filename" from HEAD into staging area 
11.) git checkout commitnr -- filename = take file "filename" from commit commitnr and load into the working tree and staging area

# working with branches 

1.) git log --all --decorate --oneline --graph = full overview of branch etc
-> useful to safe this as an alias with the following command:
alias overview = 'git log --all --decorate --oneline --graph'
2.) git branch name = create a new branch called "name", the branches point on the commit where HEAD is pointing on
3.) git checkout branchname = HEAD pointer moves to branch named "branchname" working tree and staging area are beeing updatet also in a same breath
4.) git branch -d branchname = delete branch with name "branchname" (careful)
5.) git branch -d branchname = delete branch with name "branchname" (hard)
6.) git merge branchname = merge the branch where the HEAD is pointing at with the branch "branchname", there a two types of merges recursive and direct forward
7.) git stash = some work that is note finalized but while you work on it you decide to work on something different. Make a snapshot and you cintinue the work later
8.) git stash list = show all stashes 
9.) git stash apply = load the most recent stash 
